version: '3.9'

services:
  zk-svc:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zk-svc
    container_name: zk-svc
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_SERVER_ID: "1"
      ZOOKEEPER_SERVERS: "server.1=zk-svc:2888:3888"

  kafka-svc:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka-svc
    container_name: kafka-svc
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka-svc:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_CONNECT: "zk-svc:2181"
      KAFKA_BROKER_ID: "1"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_JMX_PORT: "9999"
      KAFKA_JMX_HOSTNAME: "${DOCKER_HOST_IP:-127.0.0.1}"
      KAFKA_AUTHORIZER_CLASS_NAME: "kafka.security.authorizer.AclAuthorizer"
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zk-svc

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'false'
      KAFKA_CLUSTERS_0_NAME: 'Local K8 Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka-svc:19092'
      AUTH_TYPE: 'DISABLED'

  redis-svc:
    container_name: redis-svc
    image: redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  redis-ui:
    container_name: redis-ui
    image: rediscommander/redis-commander
    environment:
      REDIS_HOSTS: local:redis-svc:6379
      ADDRESS: 0.0.0.0
      PORT: 8050
    ports:
      - "8050:8050"
    restart: unless-stopped

  nginx-svc:
    image: nginx
    hostname: nginx-svc
    container_name: nginx-svc
    ports:
      - "80:80"
    volumes:
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf
  #      - ../../ui/static-content:/usr/share/nginx/html

  zipkin-svc:
    image: openzipkin/zipkin
    hostname: zipkin-svc
    container_name: zipkin-svc
    ports:
      - "9411:9411"

  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_DB: stocks
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
      #    volumes:
      #      - ~/demand-forecasting/postgres-data:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    build:
      context: .
      shm_size: 256mb
    shm_size: 512mb

  postgres-ui:
    container_name: postgres-ui
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 5050
      PGADMIN_SERVER_JSON_FILE: /pgadminconfig/servers.json
    volumes:
      - postgres-ui:/root/.pgadmin
      - ./config/postgres:/pgadminconfig
    ports:
      - "5050:5050"
    restart: unless-stopped

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command:
      - --enable-feature=exemplar-storage
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - prometheus:/tmp/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - 9090:9090

  grafana:
    container_name: grafana
    image: grafana/grafana
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./config/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/provisioning/alerting:/etc/grafana/provisioning/alerting:ro
    ports:
      - 3000:3000

  tempo:
    container_name: tempo
    image: grafana/tempo
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ '-config.file=/etc/tempo.yml' ]
    volumes:
      - tempo:/tmp/tempo
      - ./config/grafana/tempo.yml:/etc/tempo.yml:ro
    ports:
      - 3200:3200    # tempo

  loki:
    container_name: loki
    image: grafana/loki
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ '-config.file=/etc/loki/local-config.yaml' ]
    ports:
      - 3100:3100

volumes:
  postgres:
  postgres-ui:
  redis-svc:
  redis-ui:
  prometheus:
    driver: local
  tempo:
    driver: local
